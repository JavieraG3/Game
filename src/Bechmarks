import java.util.ArrayList;

public class Bechmarks {
    public static void main(String[] args) {

        ArrayList<Game> data100 = GenerateData.leerDatos("Juegos_100.csv");
        ArrayList<Game> data10k = GenerateData.leerDatos("Juegos_10000.csv");
        ArrayList<Game> data1M = GenerateData.leerDatos("Juegos_1000000.csv");

        Dataset ds100 = new Dataset(new ArrayList<>(data100));
        Dataset ds10k = new Dataset(new ArrayList<>(data10k));
        Dataset ds1M = new Dataset(new ArrayList<>(data1M));

        String[] algoritmos = {"bubble", "insertion", "selection", "merge", "quick", "collections","counting"};

        String[] atributos = {"price", "quality", "category"};


        for (String atributo : atributos) {
            System.out.println("\n=== Atributo = " + atributo + " ===");
            System.out.println("Algoritmo\t100\t10000\t1M");

            for (String alg : algoritmos) {
                if (alg.equals("counting") && !atributo.equals("quality")) {
                    continue;
                }
                
                long t1 = runAndTime(ds100, data100, alg, atributo);
                long t2 = runAndTime(ds10k, data10k, alg, atributo);
                long t3 = runAndTime(ds1M, data1M, alg, atributo);

                String s100 = (t1 < 0) ? ">300000" : Long.toString(t1);
                String s10k = (t2 < 0) ? ">300000" : Long.toString(t2);
                String s1M = (t3 < 0) ? ">300000" : Long.toString(t3);

                System.out.printf("%-10s\t%4s\t%6s\t%6s\n",
                        alg, s100, s10k, s1M);
            }
        }

        System.out.println("\n=== Benchmark b√∫squedas ===");
        String[] atributosBusqueda = {"price", "quality", "category"};

        int valorBuscarPrice = data100.get(0).getPrice();
        int valorBuscarQuality = data100.get(0).getQuality();
        String valorBuscarCategory = data100.get(0).getCategory();

        Dataset[] datasets = {ds100, ds10k, ds1M};
        ArrayList<Game>[] datos = new ArrayList[]{data100, data10k, data1M};

        for (String atributo : atributosBusqueda) {
            System.out.println("\nAtributo: " + atributo);
            System.out.println("Dataset\t\tBinaria (ms)\tLineal (ms)");

            for (int i = 0; i < datasets.length; i++) {
                Dataset ds = datasets[i];
                ArrayList<Game> original = datos[i];

               
                ArrayList<Game> copiaOrdenada = new ArrayList<>(original);
                ds.quickSortPublic(copiaOrdenada, atributo);
                ds.sortedByAttribute = atributo;

                long startBin = System.nanoTime();
                switch (atributo) {
                    case "price":
                        ds.getGamesByPrice(copiaOrdenada, valorBuscarPrice);
                        break;
                    case "quality":
                        ds.getGamesByQuality(copiaOrdenada, valorBuscarQuality);
                        break;
                    case "category":
                        ds.getGamesByCategory(copiaOrdenada, valorBuscarCategory);
                        break;
                }
                long endBin = System.nanoTime();

               
                ds.sortedByAttribute = "dummy";

                long startLin = System.nanoTime();
                switch (atributo) {
                    case "price":
                        ds.getGamesByPrice(original, valorBuscarPrice);
                        break;
                    case "quality":
                        ds.getGamesByQuality(original, valorBuscarQuality);
                        break;
                    case "category":
                        ds.getGamesByCategory(original, valorBuscarCategory);
                        break;
                }
                long endLin = System.nanoTime();

                long tiempoBin = (endBin - startBin) / 1_000;
                long tiempoLin = (endLin - startLin) / 1_000;

                System.out.printf("%-12s\t%12d\t%11d\n",
                        original.size() + " juegos", tiempoBin, tiempoLin);
            }
        }

    }

    private static long runAndTime(Dataset ds, ArrayList<Game> original, String algoritmo, String atributo) {
        int n = original.size();

        if (n >= 1_000_000 &&
                (algoritmo.equals("bubble") ||
                        algoritmo.equals("insertion") ||
                        algoritmo.equals("selection"))) {
            return -1L; 
        }

        ArrayList<Game> copia = new ArrayList<>(original);
        long start = System.nanoTime();

        switch (algoritmo) {
            case "bubble":
                ds.BubbleSort(copia, atributo);
                break;
            case "insertion":
                ds.InsertionSort(copia, atributo);
                break;
            case "selection":
                ds.selectionSort(copia, atributo);
                break;
            case "merge":
                ds.mergeSort(copia, atributo);
                break;
            case "quick":
                ds.quickSortPublic(copia, atributo);
                break;
            case "collections":
                ds.CollectionSort(copia, atributo);
                break;
            case "counting":
                if (!atributo.equals("quality")) {
                    throw new IllegalArgumentException("Counting Sort solo soporta el atributo 'quality'");
                }
                ds.countingSort(copia);
                break;
            default:
                throw new IllegalArgumentException("Alg desconocido: " + algoritmo);
        }
        long end = System.nanoTime();
        return (end - start) / 1_000;
    }
}
